{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\"; // Not exported from 'index', this type is internal.\n\n/** @private */\n\nexport class LongPollingTransport {\n  constructor(httpClient, logger, options) {\n    this._httpClient = httpClient;\n    this._logger = logger;\n    this._pollAbort = new AbortController();\n    this._options = options;\n    this._running = false;\n    this.onreceive = null;\n    this.onclose = null;\n  } // This is an internal type, not exported from 'index' so this is really just internal.\n\n\n  get pollAborted() {\n    return this._pollAbort.aborted;\n  }\n\n  async connect(url, transferFormat) {\n    Arg.isRequired(url, \"url\");\n    Arg.isRequired(transferFormat, \"transferFormat\");\n    Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n    this._url = url;\n\n    this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\"); // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n\n\n    if (transferFormat === TransferFormat.Binary && typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\") {\n      throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n    }\n\n    const [name, value] = getUserAgentHeader();\n    const headers = {\n      [name]: value,\n      ...this._options.headers\n    };\n    const pollOptions = {\n      abortSignal: this._pollAbort.signal,\n      headers,\n      timeout: 100000,\n      withCredentials: this._options.withCredentials\n    };\n\n    if (transferFormat === TransferFormat.Binary) {\n      pollOptions.responseType = \"arraybuffer\";\n    } // Make initial long polling request\n    // Server uses first long polling request to finish initializing connection and it returns without data\n\n\n    const pollUrl = `${url}&_=${Date.now()}`;\n\n    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n\n    const response = await this._httpClient.get(pollUrl, pollOptions);\n\n    if (response.statusCode !== 200) {\n      this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`); // Mark running as false so that the poll immediately ends and runs the close logic\n\n\n      this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n      this._running = false;\n    } else {\n      this._running = true;\n    }\n\n    this._receiving = this._poll(this._url, pollOptions);\n  }\n\n  async _poll(url, pollOptions) {\n    try {\n      while (this._running) {\n        try {\n          const pollUrl = `${url}&_=${Date.now()}`;\n\n          this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n\n          const response = await this._httpClient.get(pollUrl, pollOptions);\n\n          if (response.statusCode === 204) {\n            this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n\n            this._running = false;\n          } else if (response.statusCode !== 200) {\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`); // Unexpected status code\n\n\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n            this._running = false;\n          } else {\n            // Process the response\n            if (response.content) {\n              this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent)}.`);\n\n              if (this.onreceive) {\n                this.onreceive(response.content);\n              }\n            } else {\n              // This is another way timeout manifest.\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n            }\n          }\n        } catch (e) {\n          if (!this._running) {\n            // Log but disregard errors that occur after stopping\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\n          } else {\n            if (e instanceof TimeoutError) {\n              // Ignore timeouts and reissue the poll.\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n            } else {\n              // Close the connection with the error as the result.\n              this._closeError = e;\n              this._running = false;\n            }\n          }\n        }\n      }\n    } finally {\n      this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\"); // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n      // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n\n\n      if (!this.pollAborted) {\n        this._raiseOnClose();\n      }\n    }\n  }\n\n  async send(data) {\n    if (!this._running) {\n      return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\n    }\n\n    return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, data, this._options);\n  }\n\n  async stop() {\n    this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\"); // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n\n\n    this._running = false;\n\n    this._pollAbort.abort();\n\n    try {\n      await this._receiving; // Send DELETE to clean up long polling on the server\n\n      this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\n\n      const headers = {};\n      const [name, value] = getUserAgentHeader();\n      headers[name] = value;\n      const deleteOptions = {\n        headers: { ...headers,\n          ...this._options.headers\n        },\n        timeout: this._options.timeout,\n        withCredentials: this._options.withCredentials\n      };\n      await this._httpClient.delete(this._url, deleteOptions);\n\n      this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\n    } finally {\n      this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\"); // Raise close event here instead of in polling\n      // It needs to happen after the DELETE request is sent\n\n\n      this._raiseOnClose();\n    }\n  }\n\n  _raiseOnClose() {\n    if (this.onclose) {\n      let logMessage = \"(LongPolling transport) Firing onclose event.\";\n\n      if (this._closeError) {\n        logMessage += \" Error: \" + this._closeError;\n      }\n\n      this._logger.log(LogLevel.Trace, logMessage);\n\n      this.onclose(this._closeError);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["AbortController","HttpError","TimeoutError","LogLevel","TransferFormat","Arg","getDataDetail","getUserAgentHeader","sendMessage","LongPollingTransport","constructor","httpClient","logger","options","_httpClient","_logger","_pollAbort","_options","_running","onreceive","onclose","pollAborted","aborted","connect","url","transferFormat","isRequired","isIn","_url","log","Trace","Binary","XMLHttpRequest","responseType","Error","name","value","headers","pollOptions","abortSignal","signal","timeout","withCredentials","pollUrl","Date","now","response","get","statusCode","_closeError","statusText","_receiving","_poll","Information","content","logMessageContent","e","message","_raiseOnClose","send","data","Promise","reject","stop","abort","deleteOptions","delete","logMessage"],"sources":["H:\\Projects\\OnlineMarketplace\\OnlineMarketplace\\OnlineMarketplace\\ClientApp\\node_modules\\@microsoft\\signalr\\src\\LongPollingTransport.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private readonly _pollAbort: AbortController;\r\n\r\n    private _url?: string;\r\n    private _running: boolean;\r\n    private _receiving?: Promise<void>;\r\n    private _closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted(): boolean {\r\n        return this._pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, logger: ILogger, options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n\r\n        this._running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._url = url;\r\n\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        } else {\r\n            this._running = true;\r\n        }\r\n\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n\r\n    private async _poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this._running) {\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this._running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent!)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url!, data, this._options);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n\r\n        try {\r\n            await this._receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n\r\n            const headers: {[k: string]: string} = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            await this._httpClient.delete(this._url!, deleteOptions);\r\n\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}