{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\nimport { LogLevel } from \"./ILogger\";\nimport { isArrayBuffer } from \"./Utils\";\nexport class XhrHttpClient extends HttpClient {\n  constructor(logger) {\n    super();\n    this._logger = logger;\n  }\n  /** @inheritDoc */\n\n\n  send(request) {\n    // Check that abort was not signaled before calling send\n    if (request.abortSignal && request.abortSignal.aborted) {\n      return Promise.reject(new AbortError());\n    }\n\n    if (!request.method) {\n      return Promise.reject(new Error(\"No method defined.\"));\n    }\n\n    if (!request.url) {\n      return Promise.reject(new Error(\"No url defined.\"));\n    }\n\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open(request.method, request.url, true);\n      xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\n      xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\n      if (request.content === \"\") {\n        request.content = undefined;\n      }\n\n      if (request.content) {\n        // Explicitly setting the Content-Type header for React Native on Android platform.\n        if (isArrayBuffer(request.content)) {\n          xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n        } else {\n          xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n        }\n      }\n\n      const headers = request.headers;\n\n      if (headers) {\n        Object.keys(headers).forEach(header => {\n          xhr.setRequestHeader(header, headers[header]);\n        });\n      }\n\n      if (request.responseType) {\n        xhr.responseType = request.responseType;\n      }\n\n      if (request.abortSignal) {\n        request.abortSignal.onabort = () => {\n          xhr.abort();\n          reject(new AbortError());\n        };\n      }\n\n      if (request.timeout) {\n        xhr.timeout = request.timeout;\n      }\n\n      xhr.onload = () => {\n        if (request.abortSignal) {\n          request.abortSignal.onabort = null;\n        }\n\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\n        } else {\n          reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\n        }\n      };\n\n      xhr.onerror = () => {\n        this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\n\n        reject(new HttpError(xhr.statusText, xhr.status));\n      };\n\n      xhr.ontimeout = () => {\n        this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\n\n        reject(new TimeoutError());\n      };\n\n      xhr.send(request.content);\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["AbortError","HttpError","TimeoutError","HttpClient","HttpResponse","LogLevel","isArrayBuffer","XhrHttpClient","constructor","logger","_logger","send","request","abortSignal","aborted","Promise","reject","method","Error","url","resolve","xhr","XMLHttpRequest","open","withCredentials","undefined","setRequestHeader","content","headers","Object","keys","forEach","header","responseType","onabort","abort","timeout","onload","status","statusText","response","responseText","onerror","log","Warning","ontimeout"],"sources":["H:\\Projects\\OnlineMarketplace\\OnlineMarketplace\\OnlineMarketplace\\ClientApp\\node_modules\\@microsoft\\signalr\\src\\XhrHttpClient.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            if (request.content === \"\") {\r\n                request.content = undefined;\r\n            }\r\n            if (request.content) {\r\n                // Explicitly setting the Content-Type header for React Native on Android platform.\r\n                if (isArrayBuffer(request.content)) {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\r\n                } else {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n                }\r\n            }\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}